- name: Remove Docker Packages
  apt:
    name: "{{ item }}"
    state: absent
  loop:
    - docker
    - docker-engine
    - docker.io
    - containerd
    - runc
- name: Install aptitude
  apt:
    name: aptitude
    state: latest
    update_cache: true

- name: Install required system packages
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools
    state: latest
    update_cache: true

- name: Run the equivalent of "apt-get update" as a separate step
  ansible.builtin.apt:
    upgrade: dist 
    update_cache: yes
    cache_valid_time: 3600
    autoclean: yes 
    autoremove: yes 
    force_apt_get: yes 

- name: Run apt-get install -f
  become: true 
  command: apt-get install -y 
  ignore_errors: yes 

- name: Add Docker GPG apt Key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
    
- name: Add Docker Repository
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu jammy stable
    state: present

- name: Update package lists
  become: yes
  apt:
    update_cache: yes
- name: Resolve dependencies and broken packages
  become: yes
  apt:
    name: "*"
    state: present 
- name: Remove conflicting packages
  become: yes
  apt:
    name: package_name_to_remove
    state: absent
- name: Clean package cache
  become: yes
  shell: apt-get clean

- name: install docker and its dependencies
  become: yes
  apt:
    pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present 
  ignore_errors: yes
    
- name: Install Docker Module for Python
  pip:
    name: docker

- name: Pull Docker image
  docker_image:
    name: busybox
    source: pull

- name: Run Docker container
  docker_container:
    name: test-container
    image: busybox
    state: started
    ports:
      - 8080

- name: Start a container with a command
  community.docker.docker_container:
    name: sleepy
    image: ubuntu:14.04
    command: ["sleep", "infinity"]

- name: Start container with healthstatus
  community.docker.docker_container:
    name: nginx-proxy
    image: nginx:1.13
    state: started
    healthcheck:
# Check if nginx server is healthy by curl'ing the server.
# If this fails or timeouts, the healthcheck fails.
      test: ["CMD", "curl", "--fail", "http://nginx.host.com"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 30s

- name: Run nginx container
  docker_container:
    name: nginx_container
    image: nginx
    state: started
    recreate: yes
    ports:
      - "80:80"